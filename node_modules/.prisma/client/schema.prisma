generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  passwordHash   String
  name           String
  role           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  referralCode   String?  @unique
  referredByCode String?

  openedShifts Shift[]       @relation("OpenedByUser")
  closedShifts Shift[]       @relation("ClosedByUser")
  transactions Transaction[]
}

enum Role {
  OWNER
  STAFF
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  menus     Menu[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Menu {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  price           Float
  categoryId      Int?
  category        Category?         @relation(fields: [categoryId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime? // For soft delete
  TransactionItem TransactionItem[]
}

model Transaction {
  id               Int               @id @default(autoincrement())
  totalAmount      Float
  transactionDate  DateTime          @default(now())
  userId           Int // Staff who processed
  user             User              @relation(fields: [userId], references: [id])
  paymentMethod    String? // e.g., "cash", "card"
  transactionItems TransactionItem[]
  shiftId          Int?
  shift            Shift?            @relation(fields: [shiftId], references: [id])
}

model TransactionItem {
  id                 Int         @id @default(autoincrement())
  transactionId      Int
  transaction        Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  menuId             Int
  menu               Menu        @relation(fields: [menuId], references: [id])
  quantity           Int
  priceAtTransaction Float // Price of the menu item at the time of transaction
}

model Shift {
  id                   Int           @id @default(autoincrement())
  startTime            DateTime      @default(now())
  endTime              DateTime?
  initialCash          Float?
  finalCash            Float?
  totalSalesCalculated Float?
  status               ShiftStatus   @default(OPEN)
  openedByUserId       Int
  openedByUser         User          @relation("OpenedByUser", fields: [openedByUserId], references: [id])
  closedByUserId       Int?
  closedByUser         User?         @relation("ClosedByUser", fields: [closedByUserId], references: [id])
  transactions         Transaction[]
}

enum ShiftStatus {
  OPEN
  CLOSED
}
