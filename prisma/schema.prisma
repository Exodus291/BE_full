generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

model User {
  id                          Int      @id @default(autoincrement())
  email                       String   @unique
  passwordHash                String
  name                        String
  role                        Role     @default(STAFF) // Role is now non-optional with a default
  bio                         String?  // Bio pengguna, opsional
  profilePictureUrl           String? // URL ke gambar profil pengguna, opsional
  backgroundProfilePictureUrl String? // URL ke gambar background profil pengguna, opsional
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  referralCode String?  @unique
  referredByCode String?

  openedShifts  Shift[]  @relation("OpenedByUser")
  closedShifts  Shift[]  @relation("ClosedByUser")
  transactions  Transaction[]

  // Relasi untuk multi-store
  storeId      Int?     // Toko tempat user ini bekerja (Owner atau Staff)
  store        Store?   @relation("StoreMembership", fields: [storeId], references: [id])
  ownedStore   Store?   @relation("OwnedStore") // Toko yang dimiliki oleh user ini (jika role OWNER)
}

enum Role {
  OWNER
  STAFF
}

model Store {
  id        Int      @id @default(autoincrement())
  name      String   @unique // Nama toko harus unik
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId   Int      @unique // Setiap toko hanya dimiliki oleh satu Owner
  owner     User     @relation("OwnedStore", fields: [ownerId], references: [id])
  members   User[]   @relation("StoreMembership") // Semua user (Owner & Staff) yang tergabung dalam toko ini

  categories Category[] // Kategori yang dimiliki oleh toko ini
  menus      Menu[]     // Menu yang dimiliki oleh toko ini
  shifts     Shift[]    // Shift yang terjadi di toko ini
  transactions Transaction[] // Transaksi yang terjadi di toko ini
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   // Nama kategori, unik per toko (akan dihandle di logic atau constraint komposit jika perlu)
  menus     Menu[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? 
  storeId   Int
  store     Store    @relation(fields: [storeId], references: [id])

  @@unique([name, storeId]) // Kategori harus unik per toko
}

model Menu {
  id          Int      @id @default(autoincrement())
  name        String   // Nama menu, unik per toko (akan dihandle di logic atau constraint komposit jika perlu)
  price       Decimal  // Menggunakan Decimal untuk harga
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime? // For soft delete
  TransactionItem TransactionItem[]
  storeId     Int
  store       Store    @relation(fields: [storeId], references: [id])

  @@unique([name, storeId]) // Menu harus unik per toko
}

model Transaction {
  id                String   @id @default(uuid()) // Menggunakan UUID sebagai ID
  totalAmount       Decimal  // Menggunakan Decimal untuk total
  transactionDate   DateTime @default(now())
  userId            Int // Staff who processed
  user              User     @relation(fields: [userId], references: [id])
  status            TransactionStatus @default(PENDING) // Menggunakan enum dan menambahkan default
  paymentMethod     String?  // e.g., "cash", "card"
  transactionItems  TransactionItem[]
  shiftId           Int?
  shift             Shift?   @relation(fields: [shiftId], references: [id])
  storeId           Int
  store             Store    @relation(fields: [storeId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model TransactionItem {
  id                  String   @id @default(uuid()) // Menggunakan UUID sebagai ID untuk konsistensi, atau tetap Int jika preferensi
  transactionId       String   // Harus cocok dengan tipe ID di Transaction
  customerName        String
  customerNote        String?
  transaction         Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  menuId              Int
  menu                Menu     @relation(fields: [menuId], references: [id])
  quantity            Int
  priceAtTransaction  Decimal // Menggunakan Decimal untuk harga saat transaksi
}

model Shift {
  id                  Int      @id @default(autoincrement())
  startTime           DateTime @default(now())
  endTime             DateTime?
  initialCash         Decimal? // Menggunakan Decimal untuk kas awal
  finalCash           Decimal? // Menggunakan Decimal untuk kas akhir
  totalSalesCalculated Decimal? // Menggunakan Decimal untuk total penjualan
  status              ShiftStatus @default(OPEN)
  openedByUserId      Int
  openedByUser        User     @relation("OpenedByUser", fields: [openedByUserId], references: [id])
  closedByUserId      Int?
  closedByUser        User?    @relation("ClosedByUser", fields: [closedByUserId], references: [id])
  transactions        Transaction[]
  storeId             Int
  store               Store    @relation(fields: [storeId], references: [id])
}

enum ShiftStatus {
  OPEN
  CLOSED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}